{"version":3,"file":"static/js/58.e6358016.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__6YMmd\",\"input\":\"ProfileInfo_input__kn+o9\",\"mainPhoto\":\"ProfileInfo_mainPhoto__gkgG6\",\"contact\":\"ProfileInfo_contact__Iv7tn\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype ProfileStatusProps = {\r\n    status: string\r\n    updateStatus: (status: any) => void\r\n}\r\n\r\ntype ProfileStatusState = {\r\n    editMode: boolean\r\n    status: any\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusProps) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status] )\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                  <b>Status: </b>  <span onDoubleClick={activateEditMode}>{props.status || \"_______\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input value={status} onChange={onStatusChange}  onBlur={deactivateEditMode} autoFocus={true}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import s from './ProfileInfo.module.css'\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\"\r\nimport {reduxForm} from \"redux-form\";\r\nimport style from \"../../../../src/components/common/FormsControls/FormsControls.module.css\";\r\nimport React from \"react\";\r\nimport {Profiletype} from \"../../../../src/redux/profile-reducer\";\r\n\r\nexport type ProfileDataFormType = {\r\n    handleSubmit: any\r\n    profile: Profiletype\r\n    error: null\r\n}\r\n\r\ntype ProfileFormDataType = {\r\n    fullName: string\r\n    lookingForAJob: string\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n}\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}: ProfileDataFormType) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>: {createField('Full name', 'fullName', [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n        </div>\r\n        <div>\r\n             <b>My professional skills</b>:\r\n            {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>:\r\n            {createField('About me', 'aboutMe', [], Textarea)}\r\n       </div>\r\n        <div>\r\n            <b>Contacts</b>: {profile.contacts && Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                <b>{key}:\r\n                    {createField('', 'lookingForAJob', [], Input)}\r\n                    </b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileFormDataType,any>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {ChangeEvent, useState} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from '../../../assests/images/user.png'\r\nimport {contactsType, Profiletype, saveProfile} from '../../../../src/redux/profile-reducer';\r\nimport ProfileStatusWithHooks from '../../../../src/components/Profile/ProfileInfo/ProfileStatusWithHooks'\r\nimport {ProfileDataFormType} from '../../../../src/components/Profile/ProfileInfo/ProfileDataForm'\r\nimport ProfileDataFormReduxForm from \"../../../../src/components/Profile/ProfileInfo/ProfileDataForm\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: Profiletype | null\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: () => void\r\n\r\n}\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileDataFormType) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props?.profile?.photos?.large || userPhoto} className={s.mainPhoto}/>\r\n                {props.isOwner && <input className={s.input} type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataFormReduxForm initialValue={props.profile} profile={props.profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={ () => {setEditMode(true)}} profile={props.profile} isOwner={props.isOwner}  />\r\n                }\r\n\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataType = {\r\n    profile: Profiletype\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataType) => {\r\n    return <div>\r\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n        <div>\r\n            <b>Full name:</b> {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {profile.contacts && Object.keys(profile.contacts).map((key) => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: contactsType | undefined\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}: ContactType) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue ? contactValue[contactTitle as keyof contactsType] : ''}</div>\r\n}\r\n\r\nexport default ProfileInfo","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__-FCiA\",\"posts\":\"MyPosts_posts__mf7ww\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__B3HEP\"};","import React from 'react'\r\nimport s from './Post.module.css'\r\n\r\nconst Post = (props: any) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://w7.pngwing.com/pngs/187/576/png-transparent-account-avatar-profile-user-avatars-icon.png\" alt=\"photo\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post","import React, {FC} from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport { MyPostsPropsType } from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nlet AddNewPostForm: FC<InjectedFormProps<{newPostText: string}>> = React.memo((props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    type={'text'}\r\n                    name='newPostText'\r\n                    component={Textarea}\r\n                    placeholder={'Post message'}\r\n                    validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n})\r\n\r\nlet AddNewPostFormRedux = reduxForm<{newPostText: string}>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\nconst MyPosts = (props: MyPostsPropsType) => {\r\n    let postsElements = props.posts.map(p => <Post message={p.message} key={p.id} likesCount={p.likesCount}/>)\r\n\r\n    const onAddPost = (values: {newPostText: string}) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default MyPosts","import React from 'react'\r\nimport {addPostActionCreator} from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {PostType} from '../../../redux/store';\r\n\r\ntype MapStateToPropsType = {\r\n    posts: PostType[]\r\n    newPostText: string\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType =  MapStateToPropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => dispatch(addPostActionCreator(newPostText)),\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer","import React from 'react'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {Profiletype} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfileType = {\r\n    profile: Profiletype | null\r\n    status: any\r\n    updateStatus: (status: any) => void\r\n    savePhoto: any\r\n    isOwner: boolean\r\n    saveProfile: any\r\n}\r\n\r\nconst Profile = (props: ProfileType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile}\r\n                status={ props.status}\r\n                updateStatus={props.updateStatus}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import React, {ComponentType} from 'react'\r\nimport Profile from './Profile'\r\nimport {withRouter} from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    Profiletype,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {compose} from \"redux\";\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport {ProfilePageType} from \"../../../src/redux/store\";\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerProps> {\r\n    refreshProfile = () => {\r\n        let userId = this.props.match.params.userId ? +this.props.match.params.userId : 27595\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId!\r\n\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(String(userId))\r\n        this.props.getStatus(String(userId))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerProps>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n           <Profile {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                    savePhoto={this.props.savePhoto}\r\n           />\r\n        )\r\n    }\r\n}\r\n\r\ntype MSTP = {\r\n    profile: Profiletype | null\r\n    status: any\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (id: string) => void\r\n    getStatus: (id: string) => void\r\n    updateStatus: (id: string) => void\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (profile: ProfilePageType) => Promise<any>\r\n}\r\n\r\ntype ProfileContainerProps = MapDispatchToPropsType & MSTP & RouteComponentProps<{ userId: string}>\r\n\r\nlet mapStateToProps = (state: AppStateType): MSTP => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n)(ProfileContainer)"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","value","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","createField","Input","type","Textarea","contacts","Object","keys","map","key","s","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","Preloader","src","photos","large","userPhoto","target","files","length","savePhoto","initialValue","formData","saveProfile","then","alt","message","likesCount","maxLength10","maxLengthCreator","AddNewPostForm","React","Field","name","component","placeholder","validate","required","AddNewPostFormRedux","postsElements","posts","p","id","values","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","ProfileContainer","refreshProfile","userId","match","params","authorizedUserId","history","push","getUserProfile","String","getStatus","this","prevProps","prevState","snapshot","compose","withRouter","auth","isAuth"],"sourceRoot":""}