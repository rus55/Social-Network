{"version":3,"file":"static/js/528.4c93ab33.chunk.js","mappings":"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","sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__afoRY\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype ProfileStatusProps = {\r\n    status: string\r\n    updateStatus: (status: any) => void\r\n}\r\n\r\ntype ProfileStatusState = {\r\n    editMode: boolean\r\n    status: any\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusProps) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status] )\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"_______\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input value={status} onChange={onStatusChange}  onBlur={deactivateEditMode} autoFocus={true}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react'\nimport s from './ProfileInfo.module.css'\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport {ProfilePageType} from \"../../../redux/store\";\nimport ProfileStatus from './ProfileStatus'\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\n\ntype ProfileInfoType = {\n    profile: ProfilePageType\n    status: any,\n    updateStatus: (status: any) => void\n}\nconst ProfileInfo = (props: ProfileInfoType) => {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <div>\n                <img src=\"https://wiotto.com/backend/webcontent/kcfinder/images/images/Maldives_Beach_1.jpg\"\n                     alt=\"\"/>\n            </div>\n            <div className={s.descriptionBlock}>\n              {/*  <img src={props.profile.photos.large}/>*/}\n                ava + descr\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\n            </div>\n\n        </div>\n    )\n}\n\nexport default ProfileInfo","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__Vz0l5\",\"posts\":\"MyPosts_posts__ol92P\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__5y2Ww\"};","import React from 'react'\nimport s from './Post.module.css'\n\nconst Post = (props: any) => {\n    return (\n        <div className={s.item}>\n            <img src=\"https://www.mirf.ru/wp-content/uploads/2020/09/1480331127-scaled.jpg\" alt=\"\"/>\n            {props.message}\n            <div>\n                <span>like</span> {props.likesCount}\n            </div>\n        </div>\n    )\n}\n\nexport default Post","import React, {FC} from 'react'\nimport s from './MyPosts.module.css'\nimport Post from './Post/Post'\nimport { MyPostsPropsType } from './MyPostsContainer';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport { Textarea } from '../../common/FormsControls/FormsControls';\n\nconst maxLength10 = maxLengthCreator(10)\n\nlet AddNewPostForm: FC<InjectedFormProps<{newPostText: string}>> = React.memo((props) => {\n    console.log('Render')\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    type={'text'}\n                    name='newPostText'\n                    component={Textarea}\n                    placeholder={'Post message'}\n                    validate={[required, maxLength10]}\n                />\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n})\n\nlet AddNewPostFormRedux = reduxForm<{newPostText: string}>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\n\nconst MyPosts = (props: MyPostsPropsType) => {\n    let postsElements = props.posts.map(p => <Post message={p.message} key={p.id} likesCount={p.likesCount}/>)\n\n    const onAddPost = (values: {newPostText: string}) => {\n        props.addPost(values.newPostText)\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n}\n\n\nexport default MyPosts","import React from 'react'\nimport {addPostActionCreator} from '../../../redux/profile-reducer';\nimport MyPosts from './MyPosts';\nimport {connect} from 'react-redux';\nimport {Dispatch} from 'redux';\nimport {AppStateType} from '../../../redux/redux-store';\nimport {PostType} from '../../../redux/store';\n\ntype MapStateToPropsType = {\n    posts: PostType[]\n    newPostText: string\n}\n\ntype MapDispatchPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nexport type MyPostsPropsType =  MapStateToPropsType & MapDispatchPropsType\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        addPost: (newPostText: string) => dispatch(addPostActionCreator(newPostText)),\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\nexport default MyPostsContainer","import React from 'react'\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\nimport {ProfilePageType} from \"../../redux/store\";\n\ntype ProfileType = {\n    profile: ProfilePageType\n    status: any\n    updateStatus: (status: any) => void\n}\n\nconst Profile = (props: ProfileType) => {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={ props.status} updateStatus={props.updateStatus}  />\n            <MyPostsContainer />\n        </div>\n    )\n}\n\nexport default Profile","import React, {ComponentType} from 'react'\nimport Profile from './Profile'\nimport {withRouter} from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {getStatus, getUserProfile, Profiletype, updateStatus} from \"../../redux/profile-reducer\";\nimport {compose, Dispatch} from \"redux\";\nimport {RouteComponentProps} from \"react-router\";\ninterface ProfileContainerType extends RouteComponentProps<{ userId: string | undefined }> {\n    /*match: {\n        params: {\n            userId: number\n        }\n    },\n    history: any,*/\n    profile: any,\n    status: any,\n    updateStatus: (status: any) => void\n    getUserProfile: (userId: number) => (dispatch: Dispatch) => void,\n    getStatus: (userId: number) => void\n    isAuth: boolean\n    authorizedUserId: number\n}\n\nclass ProfileContainer extends React.Component<ProfileContainerType> {\n    componentDidMount() {\n        let userId = this.props.match.params.userId ? +this.props.match.params.userId : 27595\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) {\n               // this.props.history.push('/login')\n            }\n        }\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n    }\n    render() {\n        return (\n           <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} />\n        )\n    }\n}\n\ntype MSTP = {\n    profile: Profiletype | null\n    status: any\n    authorizedUserId: number | null\n    isAuth: boolean\n}\n\nlet mapStateToProps = (state: AppStateType): MSTP => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.id,\n    isAuth: state.auth.isAuth\n})\n\nexport default compose<ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\n)(ProfileContainer)"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","value","onChange","e","currentTarget","onBlur","updateStatus","autoFocus","profile","src","alt","className","s","Preloader","message","likesCount","maxLength10","maxLengthCreator","AddNewPostForm","React","console","log","onSubmit","handleSubmit","Field","type","name","component","Textarea","placeholder","validate","required","AddNewPostFormRedux","reduxForm","form","postsElements","posts","map","p","id","values","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreator","MyPosts","ProfileContainer","userId","this","match","params","authorizedUserId","getUserProfile","getStatus","compose","withRouter","auth","isAuth"],"sourceRoot":""}